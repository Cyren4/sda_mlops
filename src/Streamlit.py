import streamlit as st
import pandas as pd
import mlflow.pyfunc
import os

# === CONFIGURATION DE LA PAGE ===
st.set_page_config(page_title="Pr√©diction du d√©faut de paiement", layout="wide")

# === CONFIGURATION MLflow ===
RUN_ID = "a1f653e1ba1645eeb33a3b62661569ef"  # Remplace par l'ID de ton mod√®le correct
MODEL_URI = f"/Users/yoavcohen/Desktop/sda_mlops/src/mlruns/0/{RUN_ID}/artifacts/random_forest_model"
rf_model = mlflow.pyfunc.load_model(MODEL_URI)

# === CHARGER LE MOD√àLE MLflow ===
@st.cache_resource
def load_model():
    return mlflow.pyfunc.load_model(MODEL_URI)

rf_model = load_model()

# === BARRE DE NAVIGATION ===
st.sidebar.title("Navigation")
page = st.sidebar.radio("Aller √†", ["üìä Performance du Mod√®le", "ü§ñ Pr√©diction"])

# === PAGE 1 : ANALYSE DES PERFORMANCES ===
if page == "üìä Performance du Mod√®le":
    st.title("üìä Performance du Mod√®le")
    
    # Charger les m√©triques sauvegard√©es
    metrics_path = f"/Users/yoavcohen/Desktop/sda_mlops/src/mlruns/0/{RUN_ID}/metrics"
    artifacts_path = f"/Users/yoavcohen/Desktop/sda_mlops/src/mlruns/0/{RUN_ID}/artifacts"

    if os.path.exists(metrics_path):
        try:
            accuracy = float(open(f"{metrics_path}/accuracy").read().strip())
            st.metric("üéØ Accuracy", f"{accuracy:.2%}")
        except:
            st.warning("‚ö†Ô∏è Impossible de charger l'accuracy.")

    # Affichage des images enregistr√©es dans MLflow
    st.subheader("üìå Matrice de Confusion")
    cm_path = f"{artifacts_path}/confusion_matrix.png"
    if os.path.exists(cm_path):
        st.image(cm_path, caption="Matrice de Confusion")
    else:
        st.warning("‚ö†Ô∏è Matrice de confusion introuvable.")

    st.subheader("üìà Courbe ROC")
    roc_path = f"{artifacts_path}/roc_curve.png"
    if os.path.exists(roc_path):
        st.image(roc_path, caption="Courbe ROC")
    else:
        st.warning("‚ö†Ô∏è Courbe ROC introuvable.")

    st.subheader("üìâ Courbe Pr√©cision-Rappel")
    pr_path = f"{artifacts_path}/precision_recall_curve.png"
    if os.path.exists(pr_path):
        st.image(pr_path, caption="Courbe Pr√©cision-Rappel")
    else:
        st.warning("‚ö†Ô∏è Courbe Pr√©cision-Rappel introuvable.")

    st.subheader("üí° Importance des Features")
    fi_path = f"{artifacts_path}/feature_importances.png"
    if os.path.exists(fi_path):
        st.image(fi_path, caption="Importance des Features")
    else:
        st.warning("‚ö†Ô∏è Importance des Features introuvable.")

# === PAGE 2 : PR√âDICTION ===
if page == "ü§ñ Pr√©diction":
    st.title("ü§ñ Pr√©diction du d√©faut de paiement")

    st.markdown("**Remplissez les informations du client pour obtenir une pr√©diction.**")

    # Champs de saisie
    age = st.number_input("√Çge du client", min_value=18, max_value=100, value=30)
    revenu_annuel = st.number_input("Revenu annuel ($)", min_value=1000, max_value=1000000, value=50000)
    score_credit = st.slider("Score de cr√©dit", min_value=300, max_value=850, value=600)
    duree_emploi = st.number_input("Ann√©es d'emploi", min_value=0, max_value=50, value=5)
    nombre_cartes_credit = st.number_input("Nombre de cartes de cr√©dit", min_value=0, max_value=10, value=2)
    taux_utilisation_credit = st.slider("Taux d'utilisation du cr√©dit (%)", min_value=0, max_value=100, value=30)
    historique_paiement = st.slider("Historique de paiement (1: Tr√®s mauvais, 5: Excellent)", min_value=1, max_value=5, value=3)

    # Transformer les entr√©es en DataFrame
    input_data = pd.DataFrame({
        "age": [age],
        "revenu_annuel": [revenu_annuel],
        "score_credit": [score_credit],
        "duree_emploi": [duree_emploi],
        "nombre_cartes_credit": [nombre_cartes_credit],
        "taux_utilisation_credit": [taux_utilisation_credit],
        "historique_paiement": [historique_paiement]
    })

    # Bouton pour pr√©dire
    if st.button("Pr√©dire le d√©faut de paiement"):
        prediction = rf_model.predict(input_data)
        resultat = "‚ö†Ô∏è Risque de d√©faut de paiement !" if prediction[0] == 1 else "‚úÖ Aucun risque d√©tect√©."
        st.subheader("R√©sultat de la pr√©diction")
        st.write(resultat)
